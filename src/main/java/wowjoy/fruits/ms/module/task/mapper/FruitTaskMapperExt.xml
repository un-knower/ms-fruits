<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="wowjoy.fruits.ms.module.task.mapper.FruitTaskMapperExt">
    <resultMap id="InfoResultMap" type="wowjoy.fruits.ms.module.task.FruitTaskInfo">
        <result column="uuid" jdbcType="VARCHAR" property="uuid"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="task_status" jdbcType="VARCHAR" property="taskStatus"/>
        <result column="status_description" jdbcType="VARCHAR" property="statusDescription"/>
        <result column="task_level" jdbcType="VARCHAR" property="taskLevel"/>
        <result column="estimated_end_date" jdbcType="DATE" property="estimatedEndDate"/>
        <result column="end_date" jdbcType="TIMESTAMP" property="endDate"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="modify_date_time" jdbcType="TIMESTAMP" property="modifyDateTime"/>
        <result column="create_date_time" jdbcType="TIMESTAMP" property="createDateTime"/>
        <result column="is_deleted" jdbcType="VARCHAR" property="isDeleted"/>
        <result column="list_id" jdbcType="VARCHAR" property="listId"/>
    </resultMap>

    <resultMap id="ProjectResultMap" type="wowjoy.fruits.ms.module.task.FruitTaskProject">
        <result column="uuid" jdbcType="VARCHAR" property="uuid"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="project_status" jdbcType="VARCHAR" property="projectStatus"/>
        <result column="status_description" jdbcType="VARCHAR" property="statusDescription"/>
        <result column="predict_start_date" jdbcType="DATE" property="predictStartDate"/>
        <result column="predict_end_date" jdbcType="DATE" property="predictEndDate"/>
        <result column="end_date" jdbcType="TIMESTAMP" property="endDate"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="modify_date_time" jdbcType="TIMESTAMP" property="modifyDateTime"/>
        <result column="create_date_time" jdbcType="TIMESTAMP" property="createDateTime"/>
        <result column="is_deleted" jdbcType="VARCHAR" property="isDeleted"/>

        <result column="task_id" jdbcType="VARCHAR" property="taskId"/>
    </resultMap>

    <resultMap id="UserResultMap" type="wowjoy.fruits.ms.module.task.FruitTaskUser">
        <result column="uuid" jdbcType="VARCHAR" property="uuid"/>
        <result column="user_id" jdbcType="VARCHAR" property="userId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="birthday" jdbcType="TIMESTAMP" property="birthday"/>
        <result column="user_email" jdbcType="VARCHAR" property="userEmail"/>
        <result column="user_sex" jdbcType="VARCHAR" property="userSex"/>
        <result column="job_title" jdbcType="VARCHAR" property="jobTitle"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="modify_date_time" jdbcType="TIMESTAMP" property="modifyDateTime"/>
        <result column="create_date_time" jdbcType="TIMESTAMP" property="createDateTime"/>
        <result column="is_deleted" jdbcType="VARCHAR" property="isDeleted"/>

        <result column="task_id" jdbcType="VARCHAR" property="taskId"/>
        <result column="user_role" jdbcType="VARCHAR" property="userRole"/>
    </resultMap>

    <resultMap id="ListResultMap" type="wowjoy.fruits.ms.module.task.FruitTaskList">
        <result column="uuid" jdbcType="VARCHAR" property="uuid"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="l_type" jdbcType="VARCHAR" property="lType"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="modify_date_time" jdbcType="TIMESTAMP" property="modifyDateTime"/>
        <result column="create_date_time" jdbcType="TIMESTAMP" property="createDateTime"/>
        <result column="is_deleted" jdbcType="VARCHAR" property="isDeleted"/>

        <result column="task_id" jdbcType="VARCHAR" property="taskId"/>
    </resultMap>

    <resultMap id="TaskResultMap" type="wowjoy.fruits.ms.module.plan.FruitPlanTask">
        <result column="uuid" jdbcType="VARCHAR" property="uuid"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="task_status" jdbcType="VARCHAR" property="taskStatus"/>
        <result column="status_description" jdbcType="VARCHAR" property="statusDescription"/>
        <result column="task_level" jdbcType="VARCHAR" property="taskLevel"/>
        <result column="estimated_end_date" jdbcType="DATE" property="estimatedEndDate"/>
        <result column="end_date" jdbcType="TIMESTAMP" property="endDate"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="modify_date_time" jdbcType="TIMESTAMP" property="modifyDateTime"/>
        <result column="create_date_time" jdbcType="TIMESTAMP" property="createDateTime"/>
        <result column="is_deleted" jdbcType="VARCHAR" property="isDeleted"/>

        <result column="plan_id" jdbcType="VARCHAR" property="planId"/>
    </resultMap>
    <sql id="Base_Example_Where_Clause">
        <foreach collection="example.oredCriteria" item="criteria" separator="or">
            <if test="criteria.valid">
                <trim prefix="(" prefixOverrides="and" suffix=")">
                    <foreach collection="criteria.criteria" item="criterion">
                        <choose>
                            <when test="criterion.noValue">
                                and ${replace}.${criterion.condition}
                            </when>
                            <when test="criterion.singleValue">
                                and ${replace}.${criterion.condition} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                and ${replace}.${criterion.condition} #{criterion.value} and
                                #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                and ${replace}.${criterion.condition}
                                <foreach close=")" collection="criterion.value" item="listItem" open="("
                                         separator=",">
                                    #{listItem}
                                </foreach>
                            </when>
                        </choose>
                    </foreach>
                </trim>
            </if>
        </foreach>
    </sql>
    <sql id="list_Example_Where_Clause">
        <foreach collection="listExample.oredCriteria" item="criteria" separator="or">
            <if test="criteria.valid">
                <trim prefix="(" prefixOverrides="and" suffix=")">
                    <foreach collection="criteria.criteria" item="criterion">
                        <choose>
                            <when test="criterion.noValue">
                                and ${replace}.${criterion.condition}
                            </when>
                            <when test="criterion.singleValue">
                                and ${replace}.${criterion.condition} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                and ${replace}.${criterion.condition} #{criterion.value} and
                                #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                and ${replace}.${criterion.condition}
                                <foreach close=")" collection="criterion.value" item="listItem" open="("
                                         separator=",">
                                    #{listItem}
                                </foreach>
                            </when>
                        </choose>
                    </foreach>
                </trim>
            </if>
        </foreach>
    </sql>

    <sql id="Base_Column_List">
        ${replace}.uuid,
        ${replace}.title,
        ${replace}.task_status,
        ${replace}.status_description,
        ${replace}.task_level,
        ${replace}.estimated_end_date,
        ${replace}.end_date,
        ${replace}.description,
        ${replace}.modify_date_time,
        ${replace}.create_date_time,
        ${replace}.is_deleted
    </sql>

    <sql id="User_Column_List">
       ${replace}.uuid as ${prefix}uuid,
        ${replace}.user_id as ${prefix}user_id,
        ${replace}.user_name as ${prefix}user_name,
        ${replace}.status as ${prefix}status,
        ${replace}.birthday as ${prefix}birthday,
        ${replace}.user_email as ${prefix}user_email,
        ${replace}.user_sex as ${prefix}user_sex,
        ${replace}.job_title as ${prefix}job_title,
        ${replace}.description as ${prefix}description,
        ${replace}.modify_date_time as ${prefix}modify_date_time,
        ${replace}.create_date_time as ${prefix}create_date_time,
        ${replace}.is_deleted as ${prefix}is_deleted
    </sql>

    <sql id="Plan_Column_List">
        ${replace}.uuid as ${prefix}uuid,
        ${replace}.title as ${prefix}title,
        ${replace}.plan_status as ${prefix}plan_status,
        ${replace}.status_description as ${prefix}status_description,
        ${replace}.percent as ${prefix}percent,
        ${replace}.estimated_start_date as ${prefix}estimated_start_date,
        ${replace}.estimated_end_date as ${prefix}estimated_end_date,
        ${replace}.end_date as ${prefix}end_date,
        ${replace}.parent_id as ${prefix}parent_id,
        ${replace}.modify_date_time as ${prefix}modify_date_time,
        ${replace}.create_date_time as ${prefix}create_date_time,
        ${replace}.is_deleted as ${prefix}is_deleted,
        ${replace}.description as ${prefix}description
    </sql>

    <sql id="Project_Column_List">
        ${replace}.uuid as ${prefix}uuid,
        ${replace}.title as ${prefix}title,
        ${replace}.project_status as ${prefix}project_status,
        ${replace}.status_description as ${prefix}status_description,
        ${replace}.predict_start_date as ${prefix}predict_start_date,
        ${replace}.predict_end_date as ${prefix}predict_end_date,
        ${replace}.end_date as ${prefix}end_date,
        ${replace}.description as ${prefix}description,
        ${replace}.modify_date_time as ${prefix}modify_date_time,
        ${replace}.create_date_time as ${prefix}create_date_time,
        ${replace}.is_deleted as ${prefix}is_deleted
    </sql>

    <sql id="List_Column_List">
        ${replace}.uuid as ${prefix}uuid,
        ${replace}.title as ${prefix}title,
        ${replace}.l_type as ${prefix}l_type,
        ${replace}.description as ${prefix}description,
        ${replace}.modify_date_time as ${prefix}modify_date_time,
        ${replace}.create_date_time as ${prefix}create_date_time,
        ${replace}.is_deleted as ${prefix}is_deleted
    </sql>

    <select id="selectByListExampleAndProjectId" resultMap="InfoResultMap">
        select
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        ,
        listJoin.list_id
        from fruits_task ftask
        right join (
        select listJoin.task_id,listJoin.list_id from task_list_relation listJoin
        right join (select list_id,project_id from project_list_relation where project_id = #{projectId} and is_deleted
        = 'N') projectJoin on listJoin.list_id = projectJoin.list_id
        right join (select uuid as list_id from fruits_list flist
        <trim suffixOverrides="AND | OR" prefixOverrides="AND | OR">
            <where>
                <include refid="list_Example_Where_Clause">
                    <property name="replace" value="flist"/>
                </include>
                AND flist.is_deleted = 'N'
            </where>
        </trim>
        ) flist on flist.list_id = projectJoin.list_id
        where listJoin.is_deleted = 'N'
        ) listJoin on listJoin.task_id = ftask.uuid
        <trim prefixOverrides="AND | OR" suffixOverrides="AND | OR">
            <where>
                <include refid="Base_Example_Where_Clause">
                    <property name="replace" value="ftask"/>
                </include>
                AND ftask.is_deleted = 'N'
                and ftask.uuid is not null
            </where>
        </trim>
        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>

    <select id="selectJoinUserByTaskIds" resultMap="UserResultMap">
        select
        <include refid="User_Column_List">
            <property name="replace" value="fuser"/>
            <property name="prefix" value=""/>
        </include>
        ,
        userJoin.user_role,userJoin.task_id
        from (select userJoin.user_role,userJoin.task_id,userJoin.user_id from fruits_task ftask
        right join (select task_id,user_id,user_role from task_user_relation
        <where>
            task_id in
            <foreach collection="ids" open="(" close=")" item="id" separator=",">
                #{id}
            </foreach>
            and is_deleted = 'N'
        </where>
        ) userJoin on userJoin.task_id = ftask.uuid
        <where>
            ftask.is_deleted = 'N'
        </where>
        group by userJoin.user_role,userJoin.task_id,userJoin.user_id) userJoin
        left join (select
        <include refid="User_Column_List">
            <property name="replace" value="fuser"/>
            <property name="prefix" value=""/>
        </include>
        from fruits_user fuser where fuser.is_deleted = 'N') fuser on fuser.user_id = userJoin.user_id
        where fuser.user_id is not null
    </select>

    <!-- 查询任务关联项目 -->
    <select id="selectProjectByTask" resultMap="ProjectResultMap">
        SELECT
        <include refid="Project_Column_List">
            <property name="replace" value="fproject"/>
            <property name="prefix" value=""/>
        </include>
        ,
        task.uuid as task_id
        from (
        select
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        ,
        projectJoin.project_id
        from fruits_task ftask
        right join (select task_id,project_id from task_project_relation where is_deleted = 'N') projectJoin on
        projectJoin.task_id = ftask.uuid
        <where>
            ftask.uuid in
            <foreach collection="taskIds" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
            and ftask.is_deleted = 'N'
        </where>
        union all
        select
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        ,
        planJoin.project_id
        from fruits_task ftask
        right join (select plan_id,task_id from task_plan_relation where is_deleted = 'N') taskJoin on taskJoin.task_id
        = ftask.uuid
        right join (select plan_id,project_id from plan_project_relation WHERE is_deleted = 'N' ) planJoin on
        planJoin.plan_id = taskJoin.plan_id
        <where>
            ftask.uuid in
            <foreach collection="taskIds" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
            and ftask.is_deleted = 'N'
        </where>
        ) task
        left join (select
        <include refid="Project_Column_List">
            <property name="replace" value="fproject"/>
            <property name="prefix" value=""/>
        </include>
        from fruits_project fproject where fproject.is_deleted = 'N') fproject on fproject.uuid = task.project_id
        <trim suffixOverrides="AND | OR" prefixOverrides="AND | OR ">
            <where>
                <include refid="Base_Example_Where_Clause">
                    <property name="replace" value="task"/>
                </include>
            </where>
        </trim>
    </select>

    <!--根据任务查询列表-->
    <select id="selectListByTask" resultMap="ListResultMap">
        SELECT
        <include refid="List_Column_List">
            <property name="replace" value="flist"/>
            <property name="prefix" value=""/>
        </include>
        ,
        taskJoin.task_id
        from fruits_list flist
        right join (select task_id,list_id from task_list_relation where is_deleted = 'N') taskJoin on taskJoin.list_id
        = flist.uuid
        right join (select ftask.uuid from fruits_task ftask
        <trim suffixOverrides="AND | OR" prefixOverrides="AND | OR ">
            <where>
                <include refid="Base_Example_Where_Clause">
                    <property name="replace" value="ftask"/>
                </include>
                and ftask.is_deleted = 'N'
            </where>
        </trim>
        ) ftask on ftask.uuid = taskJoin.task_id
        where flist.uuid is not null and flist.is_deleted = 'N'
    </select>

    <select id="findUserByTaskExampleAndUserIdOrProjectId" resultMap="UserResultMap">
        select
        <include refid="User_Column_List">
            <property name="replace" value="fuser"/>
            <property name="prefix" value=""/>
        </include>
        ,
        userTask.user_role,
        userTask.uuid as task_id
        from (
        SELECT userJoin.user_id,task.uuid,userJoin.user_role
        from (
        select
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        from fruits_task ftask
        right join (select task_id,project_id from task_project_relation
        <trim prefixOverrides="AND | OR" suffixOverrides="AND | OR">
            <where>
                <if test="projectId != null">
                    project_id = #{projectId}
                </if>
                and is_deleted = 'N'
            </where>
        </trim>
        ) projectJoin on
        projectJoin.task_id = ftask.uuid
        where ftask.is_deleted = 'N'
        union all
        select
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        from fruits_task ftask
        right join (select plan_id,task_id from task_plan_relation where is_deleted = 'N') taskJoin on taskJoin.task_id
        = ftask.uuid
        right join (select plan_id,project_id from plan_project_relation
        <trim prefixOverrides="AND | OR" suffixOverrides="AND | OR">
            <where>
                <if test="projectId != null">
                    project_id = #{projectId}
                </if>
                and is_deleted = 'N'
            </where>
        </trim>
        ) planJoin on
        planJoin.plan_id = taskJoin.plan_id
        where ftask.is_deleted = 'N'
        ) task
        left join (select uuid,task_id,user_id,user_role from task_user_relation
        <where>
            user_id in
            <foreach collection="userIds" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
            and is_deleted = 'N'
        </where>
        ) userJoin on
        userJoin.task_id = task.uuid
        <trim suffixOverrides="AND | OR" prefixOverrides="AND | OR ">
            <where>
                <include refid="Base_Example_Where_Clause">
                    <property name="replace" value="task"/>
                </include>
                and task.uuid is not null
            </where>
        </trim>
        group by userJoin.user_id,task.uuid,userJoin.user_role
        ) userTask
        left join (select
        <include refid="User_Column_List">
            <property name="replace" value="fuser"/>
            <property name="prefix" value=""/>
        </include>
        from fruits_user fuser where fuser.is_deleted = 'N'
        ) fuser on fuser.user_id = userTask.user_id
        where fuser.user_id is not null
    </select>


    <!--/************************************************************************************************-->
    <!--*                                       个人中心专供                                            *-->
    <!--************************************************************************************************/-->

    <select id="myTaskByExample" resultMap="InfoResultMap">
        SELECT
        <include refid="Base_Column_List">
            <property name="replace" value="task"/>
        </include>
        ,
        case
        when task.task_status = 'START' then 1
        when task.task_status = 'COMPLETE' then 2
        when task.task_status = 'END' then 3
        else -1 end as `status`
        from (
        select
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        from fruits_task ftask
        right join (select task_id,project_id from task_project_relation
        <trim prefixOverrides="AND | OR" suffixOverrides="AND | OR">
            <where>
                <if test="projectId != null">
                    project_id = #{projectId}
                </if>
                and is_deleted = 'N'
            </where>
        </trim>
        ) projectJoin on projectJoin.task_id = ftask.uuid
        where ftask.is_deleted = 'N' and ftask.uuid is not null
        union all
        select
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        from fruits_task ftask
        right join (select plan_id,task_id from task_plan_relation where is_deleted = 'N') taskJoin on taskJoin.task_id
        = ftask.uuid
        right join (select plan_id,project_id from plan_project_relation
        <trim prefixOverrides="AND | OR" suffixOverrides="AND | OR">
            <where>
                <if test="projectId != null">
                    project_id = #{projectId}
                </if>
                and is_deleted = 'N'
            </where>
        </trim>
        ) planJoin on planJoin.plan_id = taskJoin.plan_id
        where ftask.is_deleted = 'N' and ftask.uuid is not null
        ) task
        right join (select uuid,task_id,user_id from task_user_relation
        <where>
            user_id in
            <foreach collection="userIds" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
            and is_deleted = 'N'
        </where>
        ) userJoin on
        userJoin.task_id = task.uuid
        <trim suffixOverrides="AND | OR" prefixOverrides="AND | OR ">
            <where>
                <include refid="Base_Example_Where_Clause">
                    <property name="replace" value="task"/>
                </include>
                and task.uuid is not null
            </where>
        </trim>
        order by
        `status`,
        case when `status` = 1 then task.estimated_end_date else '' end asc,
        case when `status` in (2,3) then task.end_date else '' end desc
    </select>

    <select id="myCreateTask" resultMap="InfoResultMap">
        SELECT
        <include refid="Base_Column_List">
            <property name="replace" value="task"/>
        </include>
        ,
        case
        when task.task_status = 'START' then 1
        when task.task_status = 'COMPLETE' then 2
        when task.task_status = 'END' then 3
        else -1 end as `status`
        from (
        select
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        from fruits_task ftask
        right join (select task_id,project_id from task_project_relation
        <trim prefixOverrides="AND | OR" suffixOverrides="AND | OR">
            <where>
                <if test="projectId != null">
                    project_id = #{projectId}
                </if>
                and is_deleted = 'N'
            </where>
        </trim>
        ) projectJoin on projectJoin.task_id = ftask.uuid
        where ftask.is_deleted = 'N' and ftask.uuid is not null
        union all
        select
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        from fruits_task ftask
        right join (select plan_id,task_id from task_plan_relation where is_deleted = 'N') taskJoin on taskJoin.task_id
        = ftask.uuid
        right join (select plan_id,project_id from plan_project_relation
        <trim prefixOverrides="AND | OR" suffixOverrides="AND | OR">
            <where>
                <if test="projectId != null">
                    project_id = #{projectId}
                </if>
                and is_deleted = 'N'
            </where>
        </trim>
        ) planJoin on planJoin.plan_id = taskJoin.plan_id
        where ftask.is_deleted = 'N' and ftask.uuid is not null
        ) task
        right join (select `user_id`,`fruit_uuid` from fruits_logs
        <where>
            fruit_type = 'TASK' and `operate_type` = 'ADD' and is_deleted = 'N' and user_id = #{userId}
        </where>
        ) flog on flog.fruit_uuid = task.uuid
        <trim prefixOverrides="AND | OR" suffixOverrides="AND | OR">
            <where>
                <include refid="Base_Example_Where_Clause">
                    <property name="replace" value="task"/>
                </include>
                AND task.uuid is not null
            </where>
        </trim>
        order by
        `status`,
        case when `status` = 1 then task.estimated_end_date else '' end asc,
        case when `status` in (2,3) then task.end_date else '' end desc
    </select>

    <select id="myCreateTaskFromProjects" resultMap="ProjectResultMap">
        select
        <include refid="Project_Column_List">
            <property name="replace" value="fproject"/>
            <property name="prefix" value=""/>
        </include>
        from (select projectJoin.project_id from fruits_task ftask
        right join (select `fruit_uuid` from fruits_logs where user_id = #{userId} and fruit_type = 'TASK' and
        `operate_type` = 'ADD' and is_deleted = 'N') userJoin on userJoin.fruit_uuid = ftask.uuid
        right join (select task_id,project_id from task_project_relation where is_deleted = 'N') projectJoin on
        projectJoin.task_id = userJoin.fruit_uuid
        where ftask.is_deleted = 'N'
        group by projectJoin.project_id
        union
        select planJoin.project_id from fruits_task ftask
        right join (select `fruit_uuid` from fruits_logs where user_id = #{userId} and fruit_type = 'TASK' and
        `operate_type` = 'ADD' and is_deleted = 'N') userJoin on userJoin.fruit_uuid = ftask.uuid
        right join (select plan_id,task_id from task_plan_relation where is_deleted = 'N') taskJoin on taskJoin.task_id
        = userJoin.fruit_uuid
        right join (select plan_id,project_id from plan_project_relation where is_deleted = 'N') planJoin on
        planJoin.plan_id = taskJoin.plan_id
        where ftask.is_deleted = 'N'
        group by planJoin.project_id
        ) project
        left join (select
        <include refid="Project_Column_List">
            <property name="replace" value="fproject"/>
            <property name="prefix" value=""/>
        </include>
        from fruits_project fproject where fproject.is_deleted = 'N') fproject on fproject.uuid = project.project_id
        where fproject.uuid is not null
    </select>

    <!--
        fruits_task:
            index: uuid
        task_list_relation：
            index: cover_task_list
    -->
    <select id="selectByExampleExt" resultMap="InfoResultMap">
        select uuid,title,`estimated_end_date`,`end_date`,`create_date_time`,task_status,
        case
        when task_status = 'START' then 1
        when task_status = 'COMPLETE' then 2
        when task_status = 'END' then 3
        else -1 end as `status`,
        listRelation.list_id
        from fruits_task ftask
        right join (
        select task_id,list_id from task_list_relation where is_deleted = 'N' and
        list_id in
        <foreach collection="listIn" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
        ) listRelation on listRelation.task_id = ftask.uuid
        where
        `is_deleted` = 'N'
        and task_status in
        <if test="statusIn != null">
            <foreach collection="statusIn" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        and uuid is not null
        <if test="title != null">
            and `title` like #{title}
        </if>
        <choose>
            <when test="beginDateTime != null and endDateTime != null">
                and `estimated_end_date` between #{beginDateTime} and #{endDateTime}
            </when>
            <when test="endDateTime != null">
                and `estimated_end_date` &lt; #{endDateTime}
            </when>
        </choose>
        order by
        `status`,
        case when `status` = 1 then estimated_end_date else '' end asc,
        case when `status` in (2,3) then end_date else '' end desc
    </select>

    <select id="selectTaskByPlanIds" resultMap="TaskResultMap">
        select
        taskPlanRelation.plan_id as plan_id
        ,
        <include refid="Base_Column_List">
            <property name="replace" value="ftask"/>
        </include>
        ,
        case
        when ftask.task_status = 'START' then 1
        when ftask.task_status = 'COMPLETE' then 2
        when ftask.task_status = 'END' then 3
        else -1 end as `status`
        from fruits_task ftask
        right join (
        select task_id,plan_id from task_plan_relation
        where is_deleted = 'N'
        and plan_id in
        <foreach collection="planIds" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
        ) taskPlanRelation on taskPlanRelation.task_id = ftask.uuid
        <trim>
            <where>
                <include refid="Base_Example_Where_Clause">
                    <property name="replace" value="ftask"/>
                </include>
                AND
                ftask.is_deleted = 'N'
            </where>
        </trim>
        order by
        `status`,
        case when `status` = 1 then ftask.estimated_end_date else '' end asc,
        case when `status` in (2,3) then ftask.end_date else '' end desc
    </select>

    <!--
        fruits_task :
            index : uuid
        task_list_relation :
            index : cover_task_list
    -->
    <select id="taskCountByListId" resultType="java.lang.Integer">
        select count(uuid) from fruits_task ftask
        right join (
        select task_id
        from task_list_relation where is_deleted = 'N' and list_id = #{listId}) listJoin on listJoin.task_id = ftask.uuid
        where ftask.is_deleted = 'N'
    </select>

</mapper>